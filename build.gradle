group 'com.chronpwn'
version '1.0'

buildscript {
    ext {
        springBootVersion = '1.5.1.RELEASE'
    }
    repositories {
        mavenCentral()
        flatDir dirs: 'lib'
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath ':proguard'
    }
}

apply plugin: 'java'
apply plugin: 'spring-boot'

repositories {
    mavenCentral()
}

ext {
    junitJupiterApiVersion = '5.0.0-M4'
    junitJupiterVersion = '5.0.0-M4'
    junitVintageVersion = '4.12.0-M4'
    junitPlatformVersion = '1.0.0-M4'
}

dependencies {
    compile fileTree(dir: 'lib', include: '*.jar')

    // https://mvnrepository.com/artifact/commons-io/commons-io
    compile group: 'commons-io', name: 'commons-io', version: '2.5'
    // https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.6'


    compile 'org.apache.tomcat:tomcat-dbcp:8.0.30'
    compile 'com.h2database:h2'
    compile("org.springframework.boot:spring-boot-starter-data-jpa")

    testCompile group: 'junit', name: 'junit', version: '4.11'

    testCompile("org.junit.jupiter:junit-jupiter-api:${junitJupiterApiVersion}")
    testCompile("org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}")
    testCompile("org.junit.vintage:junit-vintage-engine:${junitVintageVersion}")
    testCompile("org.junit.platform:junit-platform-runner:${junitPlatformVersion}")
}

task proguard(type: proguard.gradle.ProGuardTask) {

    // You should probably import a more compact ProGuard-style configuration
    // file for all static settings, but we're specifying them all here, for
    // the sake of the example.
    //configuration 'configuration.pro'

    // Specify the input jars, output jars, and library jars.

    
    // These need to be paths relative to this build file, just specifying the jar files will not work
    injars  jar
    outjars 'build/libs/out.jar'

    libraryjars "${System.getProperty('java.home')}/lib/rt.jar"
//    libraryjars 'junit.jar'
    //libraryjars 'servlet.jar'
    //libraryjars 'jai_core.jar'
    //...

    // Save the obfuscation mapping to a file, so you can de-obfuscate any stack
    // traces later on. Keep a fixed source file attribute and all line number
    // tables to get line numbers in the stack traces.
    // You can comment this out if you're not interested in stack traces.

    printmapping 'out.map'
    renamesourcefileattribute 'SourceFile'
    keepattributes 'SourceFile,LineNumberTable'

    // Preserve all annotations.

    keepattributes '*Annotation*'

    // You can print out the seeds that are matching the keep options below.

    //printseeds 'out.seeds'

    // Preserve all public applications.

    keepclasseswithmembers 'public class * { \
        public static void main(java.lang.String[]); \
    }'

    // Preserve all native method names and the names of their classes.

    keepclasseswithmembernames includedescriptorclasses:true, 'class * { \
        native <methods>; \
    }'

    // Preserve the special static methods that are required in all enumeration
    // classes.

    keepclassmembers allowshrinking:true, 'enum * { \
        public static **[] values(); \
        public static ** valueOf(java.lang.String); \
    }'

    // Explicitly preserve all serialization members. The Serializable interface
    // is only a marker interface, so it wouldn't save them.
    // You can comment this out if your application doesn't use serialization.
    // If your code contains serializable classes that have to be backward
    // compatible, please refer to the manual.

    keepclassmembers 'class * implements java.io.Serializable { \
        static final long serialVersionUID; \
        static final java.io.ObjectStreamField[] serialPersistentFields; \
        private void writeObject(java.io.ObjectOutputStream); \
        private void readObject(java.io.ObjectInputStream); \
        java.lang.Object writeReplace(); \
        java.lang.Object readResolve(); \
    }'

    // Your application may contain more items that need to be preserved;
    // typically classes that are dynamically created using Class.forName:

    // keep 'public class mypackage.MyClass'
    // keep 'public interface mypackage.MyInterface'
    // keep 'public class * implements mypackage.MyInterface'
}

task copyRuntimeLibs(type: Copy) {

    into "libz"

    from configurations.runtime

}
